#! /usr/bin/ruby -w
# coding: utf-8

require 'rvg/rvg'
include Magick



### Point

Point = Struct.new(:row, :col)



### Elements

TERRAINS = [:desert,
            :forest,
            :mountain,
            :swamp,
            :water,
           ]

ANIMALS = [:bears, :cougars]

BLUE_STRUCTURES  = [:blue_shack,  :blue_stone]
GREEN_STRUCTURES = [:green_shack, :green_stone]
WHITE_STRUCTURES = [:white_shack, :white_stone]
BLACK_STRUCTURES = [:black_shack, :black_stone]
ALL_STRUCTURES = BLUE_STRUCTURES  + GREEN_STRUCTURES + WHITE_STRUCTURES + BLACK_STRUCTURES



### Modes

Mode = Struct.new(:name, :shacks, :stones, :include_black?, :include_not?)

NORMAL   = Mode.new(:normal,
                    [:blue_shack, :green_shack, :white_shack],
                    [:blue_stone, :green_stone, :white_stone],
                    false, false)
ADVANCED = Mode.new(:advanced,
                    [:blue_shack, :green_shack, :white_shack, :black_shack],
                    [:blue_stone, :green_stone, :white_stone, :black_stone],
                    true, true)



### Cell

class Cell
  attr_reader :distances
  attr_accessor :type

  def initialize()
    @distances = Hash.new
    @distances.default = 4
  end
end



### Board

class Board
  @@width  = 8
  @@height = 8

  def self.width
    @@width
  end
  def self.height
    @@height
  end

  def initialize()
    @data = Array.new(@@width * @@height) { Cell.new }
  end

  def self.is_in?(pos)
    return pos.col >= 0 && pos.col < @@width &&
           pos.row >= 0 && pos.row < @@height
  end

  def self.neighbours(pos)
    r, c = pos.row, pos.col
    return [
      Point.new(r-1,c  ),
      Point.new(r+1,c  ),
      Point.new(r,  c-1),
      Point.new(r,  c+1),
      Point.new(r-1,c+1),
      Point.new(r+1,c-1),
    ].select { |p| self.is_in?(p) }
  end

  def [](pos)
    return @data[pos.row * @@width + pos.col] if Board.is_in?(pos)
  end

  def set(pos, type, elements)
    self[pos].type = type
    propagate(pos, type)
    elements.each{ |e| propagate(pos, e) }
  end

  def add(pos, element)
    self[pos].elements << element
    propagate(pos, element)
  end

  def distance(pos, element)
    return self[pos]&.distances[element]
  end

  private
  def propagate(pos, element)
    queue = [[pos,0]]
    while (current, d = queue.shift)
      ds = self[current].distances
      if d < ds[element]
        ds[element] = d
        queue += Board.neighbours(current).map{|p| [p,d+1]}
      end
    end
  end
end



### Tiles

TILE1 = [[[:water],[:water],[:water],[:water],[:forest],[:forest]],
         [[:swamp],[:swamp],[:water],[:desert],[:forest],[:forest]],
         [[:swamp],[:swamp],[:desert],[:desert,:bears],[:desert,:bears],[:forest]]
        ]
TILE2 = [[[:swamp,:cougars],[:forest,:cougars],[:forest,:cougars],[:forest],[:forest],[:forest]],
         [[:swamp],[:swamp],[:forest],[:desert],[:desert],[:desert]],
         [[:swamp],[:mountain],[:mountain],[:mountain],[:mountain],[:desert]]
        ]
TILE3 = [[[:swamp],[:swamp],[:forest],[:forest],[:forest],[:water]],
         [[:swamp,:cougars],[:swamp,:cougars],[:forest],[:mountain],[:water],[:water]],
         [[:mountain,:cougars],[:mountain],[:mountain],[:mountain],[:water],[:water]]
        ]
TILE4 = [[[:desert],[:desert],[:mountain],[:mountain],[:mountain],[:mountain]],
         [[:desert],[:desert],[:mountain],[:water],[:water],[:water,:cougars]],
         [[:desert],[:desert],[:desert],[:forest],[:forest],[:forest,:cougars]]
        ]
TILE5 = [[[:swamp],[:swamp],[:swamp],[:mountain],[:mountain],[:mountain]],
         [[:swamp],[:desert],[:desert],[:water],[:mountain],[:mountain,:bears]],
         [[:desert],[:desert],[:water],[:water],[:water],[:water,:bears]]
        ]
TILE6 = [[[:desert,:bears],[:desert],[:swamp],[:swamp],[:swamp],[:forest]],
         [[:mountain,:bears],[:mountain],[:swamp],[:swamp],[:forest],[:forest]],
         [[:mountain],[:water],[:water],[:water],[:water],[:forest]]
        ]

TILES = { :tile1 => TILE1, :tile2 => TILE2,
          :tile3 => TILE3, :tile4 => TILE4,
          :tile5 => TILE5, :tile6 => TILE6,
        }



### Clues

Clue = Struct.new(:text, :elements, :predicate)

def within(d)
  return lambda { |x| x <= d }
end

def not_within(d)
  return lambda { |x| x > d }
end

def check(board, pos, clue)
  return clue.predicate.call(clue.elements.map{ |e| board.distance(pos, e) }.min)
end

def all_clues(mode)
  clues = []
  terrain_pairs = TERRAINS.product(TERRAINS).select{ |a,b| a < b }

  clues += terrain_pairs.map { |a,b| Clue.new("either #{a} or #{b}", [a,b], within(0)) }
  clues += TERRAINS.map { |t| Clue.new("within 1 of #{t}", [t], within(1)) }
  clues << Clue.new("within 1 of animal territory", ANIMALS, within(1))
  clues << Clue.new("within 2 of a standing stone", mode.stones, within(2))
  clues << Clue.new("within 2 of an abandoned shack", mode.shacks, within(2))
  clues << Clue.new("within 2 of bear territory", [:bears], within(2))
  clues << Clue.new("within 2 of cougar territory", [:cougars], within(2))
  clues << Clue.new("within 3 of blue structure", BLUE_STRUCTURES, within(3))
  clues << Clue.new("within 3 of green structure", GREEN_STRUCTURES, within(3))
  clues << Clue.new("within 3 of white structure", WHITE_STRUCTURES, within(3))
  if mode.include_black?
    clues << Clue.new("within 3 of black structure", BLACK_STRUCTURES, within(3))
  end

  if mode.include_not?
    clues += terrain_pairs.map { |a,b| Clue.new("neither #{a} nor #{b}", [a,b], not_within(0)) }
    clues += TERRAINS.map { |t| Clue.new("not within 1 of #{t}", [t], not_within(1)) }
    clues << Clue.new("not within 1 of animal territory", ANIMALS, not_within(1))
    clues << Clue.new("not within 2 of a standing stone", mode.stones, not_within(2))
    clues << Clue.new("not within 2 of an abandoned shack", mode.shacks, not_within(2))
    clues << Clue.new("not within 2 of bear territory", [:bears], not_within(2))
    clues << Clue.new("not within 2 of cougar territory", [:cougars], not_within(2))
    clues << Clue.new("not within 3 of blue structure", BLUE_STRUCTURES, not_within(3))
    clues << Clue.new("not within 3 of green structure", GREEN_STRUCTURES, not_within(3))
    clues << Clue.new("not within 3 of white structure", WHITE_STRUCTURES, not_within(3))
    if mode.include_black?
      clues << Clue.new("not within 3 of black structure", BLACK_STRUCTURES, not_within(3))
    end
  end

  return clues
end



### Rendering

def draw(board, filename)
  dy = Math.sqrt(3) / 2.0
  hexagon = lambda do |body, size|
    body.polygon(-1.0 * size,  0,
                 -0.5 * size,  dy * size,
                  0.5 * size,  dy * size,
                  1.0 * size,  0,
                  0.5 * size, -dy * size,
                 -0.5 * size, -dy * size)
  end
  triangle = lambda do |body, color, size|
    body.g.rotate(90) do |t|
      t.styles(:fill => color, :stroke => "black", :stroke_width => 1)
      t.polygon(-1.0 * size,  0,
                 0.5 * size,  dy * size,
                 0.5 * size, -dy * size)
    end
  end
  octogon = lambda do |body, color, size|
    r45 = Math.sqrt(2) / 2
    body.g.rotate(22.5) do |t|
      t.styles(:fill => color, :stroke => "black", :stroke_width => 1)
      t.polygon(-1.0 * size,  0,
                -r45 * size,  r45 * size,
                 0,           1.0 * size,
                 r45 * size,  r45 * size,
                 1.0 * size,  0,
                 r45 * size, -r45 * size,
                 0,          -1.0 * size,
                -r45 * size, -r45 * size)
    end
  end

  rvg = RVG.new(1200,800).viewbox(0,0,1200,800) do |canvas|
    canvas.background_fill = "white"
    terrain_colors = { :forest   => "LightGreen",
                       :desert   => "khaki",
                       :mountain => "LightGrey",
                       :water    => "PaleTurquoise1",
                       :swamp    => "plum",
                     }
    animal_colors = { :bears   => "black",
                      :cougars => "red",
                    }
    structure_property = { :blue_shack  => ["RoyalBlue", :triangle],
                           :blue_stone  => ["RoyalBlue", :octogon],
                           :green_shack => ["chartreuse", :triangle],
                           :green_stone => ["chartreuse", :octogon],
                           :white_shack => ["white", :triangle],
                           :white_stone => ["white", :octogon],
                           :black_shack => ["black", :triangle],
                           :black_stone => ["black", :octogon],
                         }
    canvas.translate(80, 600)
    size = 42

    for y in 0 ... Board.height
      for x in 0 ... Board.width
        hex = board[Point.new(y,x)]
        if hex.type
          canvas.g.translate(size * (x+y) * 1.5, size * (x-y) * dy) do |body|
            body.styles(:fill => terrain_colors[hex.type], :stroke => "white", :stroke_width => 2)
            hexagon.call(body, size)
            for a in ANIMALS
              if hex.distances[a] == 0
                body.g do |marker|
                  marker.styles(:fill_opacity => 0, :stroke => animal_colors[a], :stroke_width => 2)
                  hexagon.call(marker, size * 0.8)
                end
              end
            end
            for s in ALL_STRUCTURES
              if hex.distances[s] == 0
                color, shape = structure_property[s]
                case shape
                when :triangle
                  triangle.call(body, color, size * 0.3)
                when :octogon
                  octogon.call(body, color, size * 0.3)
                end
              end
            end
          end
        end
      end
    end
  end
  rvg.draw.write(filename)
end



### TMP

b = Board.new()
b.set(Point.new(4,4), :water,    [:bears, :white_stone])
b.set(Point.new(6,2), :mountain, [:black_stone])
b.set(Point.new(6,1), :swamp,    [])
b.set(Point.new(3,0), :desert,   [:cougars])
b.set(Point.new(3,1), :desert,   [:cougars])
b.set(Point.new(3,2), :desert,   [:green_shack])
b.set(Point.new(3,3), :desert,   [])
b.set(Point.new(4,1), :forest,   [:blue_shack])
b.set(Point.new(4,2), :forest,   [])
b.set(Point.new(4,3), :water ,   [:bears])
b.set(Point.new(5,4), :forest,   [])
all_clues(NORMAL).each{ |c| puts c.text }
draw(b, "test.png")
